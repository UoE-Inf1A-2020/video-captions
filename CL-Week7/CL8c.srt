1
00:00:00,000 --> 00:00:03,555
We consider a language that's
quite simple like this.

2
00:00:03,555 --> 00:00:05,070
There are three levels.

3
00:00:05,070 --> 00:00:06,404
There are other literals,

4
00:00:06,404 --> 00:00:09,315
the clauses and the form
I will call the things.

5
00:00:09,315 --> 00:00:11,970
The literals are made of atoms.

6
00:00:11,970 --> 00:00:13,275
But we'll come to
that in a moment

7
00:00:13,275 --> 00:00:15,390
because we reduce
any problem to this.

8
00:00:15,390 --> 00:00:18,805
It's worth studying
these for their sake.

9
00:00:18,805 --> 00:00:20,630
That's what we're going
to do. I'm putting that

10
00:00:20,630 --> 00:00:22,490
aside for a moment. We'll
come back to the language.

11
00:00:22,490 --> 00:00:24,560
I want to give a logical example

12
00:00:24,560 --> 00:00:26,330
of something you are
quite familiar with.

13
00:00:26,330 --> 00:00:29,479
You can use algebra to
describe a situation.

14
00:00:29,479 --> 00:00:32,240
You can describe a
graph by doing Algebra.

15
00:00:32,240 --> 00:00:36,440
Two can also describe some
constraints using algebra.

16
00:00:36,440 --> 00:00:38,720
And then you solve
an equation to find

17
00:00:38,720 --> 00:00:40,985
numbers that satisfy
those constraints.

18
00:00:40,985 --> 00:00:43,700
What we're going to
do now is firstly,

19
00:00:43,700 --> 00:00:46,595
to use Haskell to model

20
00:00:46,595 --> 00:00:50,420
the idea of a correct
solution to a Sudoku problem.

21
00:00:50,420 --> 00:00:53,270
Then we're going to move
that into the language and

22
00:00:53,270 --> 00:00:56,975
say is a specification of a state

23
00:00:56,975 --> 00:01:00,230
filling in at the Sudoku
board with any number of

24
00:01:00,230 --> 00:01:01,790
numbers in any one of

25
00:01:01,790 --> 00:01:04,490
the places will be a
state of the system.

26
00:01:04,490 --> 00:01:05,720
So there's lots of states.

27
00:01:05,720 --> 00:01:08,720
The solution to our specification

28
00:01:08,720 --> 00:01:10,925
will be a solution to the Sudoku.

29
00:01:10,925 --> 00:01:13,100
First thing is to
understand how we could

30
00:01:13,100 --> 00:01:15,680
just express in Haskell

31
00:01:15,680 --> 00:01:18,680
without introducing
a language whether

32
00:01:18,680 --> 00:01:20,120
a particular way of filling in

33
00:01:20,120 --> 00:01:22,595
the board satisfies
the Sudoku rules.

34
00:01:22,595 --> 00:01:25,940
We're going to write
a function S IJK.

35
00:01:25,940 --> 00:01:27,620
We consider the universe of

36
00:01:27,620 --> 00:01:31,085
all possible ways of
filling in Sudoku.

37
00:01:31,085 --> 00:01:34,280
Ijk range over the numbers one to

38
00:01:34,280 --> 00:01:37,684
nine SIJ K is the predicate,

39
00:01:37,684 --> 00:01:41,030
which is true of a solution in

40
00:01:41,030 --> 00:01:45,425
which k is the value
in square i j.

41
00:01:45,425 --> 00:01:48,530
So if I see S 44,

42
00:01:48,530 --> 00:01:50,375
that means I am talking
about this square.

43
00:01:50,375 --> 00:01:53,975
So if I see S 443,

44
00:01:53,975 --> 00:01:55,910
it would mean there was
a three in that square.

45
00:01:55,910 --> 00:01:58,760
Otherwise S4 43 is false.

46
00:01:58,760 --> 00:02:01,685
So in this example with
this state of the board,

47
00:02:01,685 --> 00:02:04,295
S 443 is false,

48
00:02:04,295 --> 00:02:07,340
but S1 to seven, it's true.

49
00:02:07,340 --> 00:02:08,450
So we haven't even describe

50
00:02:08,450 --> 00:02:09,905
that right? The next ones right?

51
00:02:09,905 --> 00:02:12,290
The first one's wrong
as 12 should be seven,

52
00:02:12,290 --> 00:02:14,835
not three anymore mistakes.

53
00:02:14,835 --> 00:02:18,505
S, 16 should be six.

54
00:02:18,505 --> 00:02:21,085
S, 21 is nine.

55
00:02:21,085 --> 00:02:25,450
S to a is for S2, nine S1,

56
00:02:25,450 --> 00:02:31,630
S3, three is 836 is nine.

57
00:02:31,630 --> 00:02:34,330
S3. As far as you can

58
00:02:34,330 --> 00:02:37,765
understand what it is for
one of those to be correct.

59
00:02:37,765 --> 00:02:39,760
Homologs to be false.

60
00:02:39,760 --> 00:02:43,735
These are the 279 atoms
that I was talking about.

61
00:02:43,735 --> 00:02:44,920
We got nine times,

62
00:02:44,920 --> 00:02:46,645
nine times nine of these.

63
00:02:46,645 --> 00:02:50,035
So you're not going to be
solving this equation by hand,

64
00:02:50,035 --> 00:02:52,960
but we can certainly represent
the state of the board.

65
00:02:52,960 --> 00:02:54,925
The first thing I want to

66
00:02:54,925 --> 00:02:57,830
convince you that we
can say is I only

67
00:02:57,830 --> 00:03:00,245
allowed one number in each square

68
00:03:00,245 --> 00:03:03,050
and you must put some
number in every square.

69
00:03:03,050 --> 00:03:04,430
Otherwise it is a solution.

70
00:03:04,430 --> 00:03:06,965
If you say upon every
number in every square,

71
00:03:06,965 --> 00:03:08,405
that's obviously no solution.

72
00:03:08,405 --> 00:03:11,330
If you put numbers in some
square, sort of solutions,

73
00:03:11,330 --> 00:03:14,525
how do we say we put
at least one number,

74
00:03:14,525 --> 00:03:16,070
any square we say,

75
00:03:16,070 --> 00:03:18,860
and for all squares,

76
00:03:18,860 --> 00:03:20,330
for all i j.

77
00:03:20,330 --> 00:03:22,130
So we take i from one to nine,

78
00:03:22,130 --> 00:03:23,465
Jade one to nine,

79
00:03:23,465 --> 00:03:26,135
and then we'll say
some number is in.

80
00:03:26,135 --> 00:03:29,105
So all of these numbers,

81
00:03:29,105 --> 00:03:31,970
this is in that narrow
square is filled

82
00:03:31,970 --> 00:03:33,890
twice L. What you can't have

83
00:03:33,890 --> 00:03:36,155
two different numbers
in the same square.

84
00:03:36,155 --> 00:03:41,945
If I take any i and
any j and any K,

85
00:03:41,945 --> 00:03:44,750
and any k prime,

86
00:03:44,750 --> 00:03:46,145
really we could say here,

87
00:03:46,145 --> 00:03:48,560
any k prime that's
not equal to k,

88
00:03:48,560 --> 00:03:49,880
but it's a bit more efficient.

89
00:03:49,880 --> 00:03:51,260
In fact, twice as fast,

90
00:03:51,260 --> 00:03:55,160
if we say any k prime
is less than k. Is that

91
00:03:55,160 --> 00:03:59,795
enough to say that whenever
k prime is less than k,

92
00:03:59,795 --> 00:04:01,550
they can't both be true.

93
00:04:01,550 --> 00:04:04,640
It is enough because that
covers the other case,

94
00:04:04,640 --> 00:04:06,005
just some different time.

95
00:04:06,005 --> 00:04:07,220
The other way, if you just put

96
00:04:07,220 --> 00:04:09,260
N4 equals Uc average-case twice.

97
00:04:09,260 --> 00:04:11,315
So this is little optimization.

98
00:04:11,315 --> 00:04:13,250
And you say either,

99
00:04:13,250 --> 00:04:15,425
it's now got a k in it.

100
00:04:15,425 --> 00:04:17,270
It's not a, got a k prime.

101
00:04:17,270 --> 00:04:18,710
It may have neither.

102
00:04:18,710 --> 00:04:20,375
In fact, in most cases,

103
00:04:20,375 --> 00:04:21,680
it will have neither.

104
00:04:21,680 --> 00:04:23,630
All we need to say
is that if I pick

105
00:04:23,630 --> 00:04:25,595
any 21 of them must be false

106
00:04:25,595 --> 00:04:29,855
because if I then fill in
the square with something,

107
00:04:29,855 --> 00:04:31,730
I can't fill him
with anything else.

108
00:04:31,730 --> 00:04:33,920
Exercise for you to think

109
00:04:33,920 --> 00:04:36,530
about right down the
other rules for Sudoku.

110
00:04:36,530 --> 00:04:39,110
So the rules are
that in each row,

111
00:04:39,110 --> 00:04:41,150
each number can only occur once.

112
00:04:41,150 --> 00:04:43,820
In each column. Each number
can only occur once.

113
00:04:43,820 --> 00:04:45,815
And in each one of
these small squares,

114
00:04:45,815 --> 00:04:48,125
each number can only
be entered once.

115
00:04:48,125 --> 00:04:51,680
There is a way of making
that slightly easier if you

116
00:04:51,680 --> 00:04:55,760
say that in every realm of
each number must occur.

117
00:04:55,760 --> 00:04:57,380
So nine must occur somewhere,

118
00:04:57,380 --> 00:04:59,540
the height must occur
somewhere that do I

119
00:04:59,540 --> 00:05:01,845
need to say either
ignored only occur once?

120
00:05:01,845 --> 00:05:04,085
Do I need to say that?
Why do we need to say it?

121
00:05:04,085 --> 00:05:05,570
Once I've said I can't

122
00:05:05,570 --> 00:05:07,535
put two numbers on
the same square.

123
00:05:07,535 --> 00:05:10,445
Then if I'm going to put
all nine numbers somewhere,

124
00:05:10,445 --> 00:05:12,335
then I will have
failed everything in,

125
00:05:12,335 --> 00:05:14,120
but I can't duplicate

126
00:05:14,120 --> 00:05:15,320
any number because that

127
00:05:15,320 --> 00:05:17,030
wouldn't leave room for
one of the numbers.

128
00:05:17,030 --> 00:05:18,650
If I have nine numbers to

129
00:05:18,650 --> 00:05:21,245
59 squares and I've got
to fill each square,

130
00:05:21,245 --> 00:05:23,510
then I can't have any
duplicates because I will

131
00:05:23,510 --> 00:05:25,790
have used up all nine squares
to get each one somewhere.

132
00:05:25,790 --> 00:05:27,440
So there will be all conditions.

133
00:05:27,440 --> 00:05:30,005
Try writing those they say

134
00:05:30,005 --> 00:05:32,780
for each row and for each digit,

135
00:05:32,780 --> 00:05:34,640
there is somewhere along

136
00:05:34,640 --> 00:05:37,055
our macro that digits is entered.

137
00:05:37,055 --> 00:05:40,500
And similarly for the
columns and the squares.
