1
00:00:00,000 --> 00:00:02,685
I'm not gonna go
into that right now.

2
00:00:02,685 --> 00:00:04,950
What I want to do
is then talk about

3
00:00:04,950 --> 00:00:09,960
the language and this language.

4
00:00:09,960 --> 00:00:13,245
The moment you may think
that's not quite Haskell.

5
00:00:13,245 --> 00:00:16,935
And if you don't make
the right definitions,

6
00:00:16,935 --> 00:00:18,240
it is not yet Haskell,

7
00:00:18,240 --> 00:00:20,025
but it actually is Haskell.

8
00:00:20,025 --> 00:00:23,190
So this language is going
to appear here in Haskell.

9
00:00:23,190 --> 00:00:26,145
So what we're going to do is
to solve a Sudoku puzzle.

10
00:00:26,145 --> 00:00:28,470
We're going to write
some conditions

11
00:00:28,470 --> 00:00:31,820
about the things which we
don't know the values of,

12
00:00:31,820 --> 00:00:33,980
just as you would do
with algebra when

13
00:00:33,980 --> 00:00:36,905
you write an equation and
say, let's solve for x,

14
00:00:36,905 --> 00:00:39,440
and we'll translate
those things I had

15
00:00:39,440 --> 00:00:42,650
before into something that
looks almost the same.

16
00:00:42,650 --> 00:00:44,720
The only difference
is I've changed

17
00:00:44,720 --> 00:00:47,644
the ands and ors too big.

18
00:00:47,644 --> 00:00:50,300
And because there's
some other functions.

19
00:00:50,300 --> 00:00:52,985
And where I said S IJK here,

20
00:00:52,985 --> 00:00:54,200
I've got, I've got

21
00:00:54,200 --> 00:00:56,540
something which is
an atom in my logic,

22
00:00:56,540 --> 00:00:58,910
which is S, i, j, k.
It's just a letter,

23
00:00:58,910 --> 00:01:01,340
it's s. Think of it
with subscripts i,

24
00:01:01,340 --> 00:01:03,755
j, k, which could take
any logical value.

25
00:01:03,755 --> 00:01:05,990
So what we're now
doing is putting

26
00:01:05,990 --> 00:01:10,100
constraints on those
logical values might take,

27
00:01:10,100 --> 00:01:13,385
we say that and this,

28
00:01:13,385 --> 00:01:15,740
and of all of these,

29
00:01:15,740 --> 00:01:17,870
just all the values we
would have had before.

30
00:01:17,870 --> 00:01:19,730
But he's making Haskell,

31
00:01:19,730 --> 00:01:23,194
write it out as a formula
rather than computed.

32
00:01:23,194 --> 00:01:25,535
So that's the hydrogen,
right? Something like that.

33
00:01:25,535 --> 00:01:27,710
And then have a way of solving it

34
00:01:27,710 --> 00:01:30,230
that will allow us
to solve Sudoku.

35
00:01:30,230 --> 00:01:33,515
What I've done is to
take from two slides ago

36
00:01:33,515 --> 00:01:35,000
and on the bottom
from one slide to

37
00:01:35,000 --> 00:01:37,265
go from two slides ago,

38
00:01:37,265 --> 00:01:39,860
we were checking
from one side to go.

39
00:01:39,860 --> 00:01:42,650
We were changing that
into will construct

40
00:01:42,650 --> 00:01:47,240
an expression with variables
in translating this checker,

41
00:01:47,240 --> 00:01:49,250
do a logical specification

42
00:01:49,250 --> 00:01:51,875
that will give us a huge number,

43
00:01:51,875 --> 00:01:54,335
8 thousand or more clauses

44
00:01:54,335 --> 00:01:57,005
in an expression is a
form in this language,

45
00:01:57,005 --> 00:01:58,190
and we'll come back to it.

46
00:01:58,190 --> 00:02:02,165
But basically, we will
then have a number

47
00:02:02,165 --> 00:02:04,520
of assertions like that that

48
00:02:04,520 --> 00:02:07,280
we want to solve simultaneously.

49
00:02:07,280 --> 00:02:09,740
So we want to find

50
00:02:09,740 --> 00:02:13,970
a model in which all of
these are valid and will

51
00:02:13,970 --> 00:02:16,955
develop the ideas working
with a tiny example

52
00:02:16,955 --> 00:02:21,275
with four or five letters
and four clauses.

53
00:02:21,275 --> 00:02:24,890
But the ideas will translate
into code that runs

54
00:02:24,890 --> 00:02:30,300
efficiently on 300 letters
and 8 thousand clauses.
